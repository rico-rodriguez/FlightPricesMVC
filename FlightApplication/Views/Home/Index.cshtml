@using Microsoft.EntityFrameworkCore.Metadata.Internal
@model FlightApplication.Models.FlightSearchModel

@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center" xmlns="http://www.w3.org/1999/html">
    <div class="search-form mt-2">
        <h1 class="display-4 mt-lg-5">Search</h1>
        <form id="form" method="post" autocomplete="off">
            
            <span>
                <div>
                    <label for="FlightLegs">One-way</label>
                    <input for="FlightLegs" type="radio" id="one-way" name="trip" value="one-way" checked>
                    <label for="FlightLegs">Round-trip</label>
                    <input for="FlightLegs" type="radio" id="round-trip" name="trip" value="round-trip">
                    <label for="FlightLegs">Multi-city</label>
                    <input for="FlightLegs" type="radio" id="multi-city" name="trip" value="multi-city">
                </div>
                <div class="input-group">
                    <div class="autocomplete" style="width:300px;">
                        <input id="Origin" type="text" name="Origin" value="@Model.Origin" placeholder="Departure Airport">
                    </div>
                    <div class="autocomplete" style="width:300px;">

                        <input id="Destination" type="text" name="Destination" value="@Model.Destination" placeholder="Arrival Airport">
                    </div>
                    <input id="DepartureDate" type="date" class="form-control" placeholder="Departure date" name="departureDate" value="@Model.DepartureDate" aria-label="Departure date" aria-describedby="button-addon2">
                    <input id="ReturnDate" type="date" class="form-control" placeholder="Return date" name="returnDate" value="@Model.ReturnDate" aria-label="Return date" aria-describedby="button-addon2">
                </div>
                <div>
                    <label for="adults">Adults</label>
                    <input type="number" id="adults" name="adults" value="@Model.Adults" min="0" max="9">
                    <label for="children">Children</label>
                    <input  type="number" id="children" name="children" min="0" max="9" value="0">
                    <label for="infants">Infants</label>
                    <input  type="number" id="infants" name="infants" min="0" max="9" value="0">
                </div>
                <div>
                    <label for="CabinClass">Economy</label>
                    <input for="CabinClass" type="radio" id="economy" name="class" value="economy" checked>
                    <label for="CabinClass">Premium economy</label>
                    <input for="CabinClass" type="radio" id="premium-economy" name="class" value="premium-economy">
                    <label for="CabinClass">Business</label>
                    <input for="CabinClass" type="radio" id="business" name="class" value="business">
                    <label for="CabinClass">First</label>
                    <input for="CabinClass" type="radio" id="first" name="class" value="first">
                </div>
                <input type="submit"/>
            </span>
        </form>
    </div>
    <div class="container destinations">
    <div class="container table-responsive" id="results">    
        <div id="loading-spinner" style="display: none;">Loading...</div>
    </div>
        <div class="card bg-dark text-black mt-3">
            <img class="card-img" src="https://content.skyscnr.com/m/e1607a0a7c92656/original/JLM_Graphic-Promo-2096x800.png?imbypass=true" alt="Card image">
            <div class="card-img-overlay d-flex justify-content-center align-items-center">
                <div class="bg-white bg-opacity-75  p-4">
                    <h5 class="card-title text-black text-xl">Last Minute Destinations</h5>
                    <p class="card-title text-black text-xl">Take a look at our last-minute travel deals and plan a trip that welcomes the New Year in a warm place.</p>
                    <button class="btn btn-primary" type="button" id="button-addon3">Explore</button>
                </div>
            </div>
        </div>
    </div>

</div>

@section scripts
{
<script>
$('form').submit(function (event) {
    event.preventDefault();
    var formData = $(this).serialize();

    // Show the loading spinner
    $('#loading-spinner').show();

    $.ajax({
        type: 'POST',
        url: '/Home/Index',
        data: formData,
        success: function (data) {
            console.log(data);
            $('#results').html(data);
            // Hide the loading spinner
            $('#loading-spinner').hide();
        }
    });
});

    $.getJSON("https://gist.githubusercontent.com/tdreyno/4278655/raw/7b0762c09b519f40397e4c3e100b097d861f5588/airports.json", function (data) {
        let airports = [];
    $.each(data, function (data, name) {
        airports.push(name.name);
    });
    console.log(airports);

        console.log(data);
        autocomplete(document.getElementById("arrivalAirport"), airports);
autocomplete(document.getElementById("departureAirport"), airports);
    });


function autocomplete(inp, arr) {
    /*the autocomplete function takes two arguments,
    the text field element and an array of possible autocompleted values:*/
    var currentFocus;
    /*execute a function when someone writes in the text field:*/
    inp.addEventListener("input", function(e) {
        var a, b, i, val = this.value;
        /*close any already open lists of autocompleted values*/
        closeAllLists();
        if (!val) { return false;}
        currentFocus = -1;
        /*create a DIV element that will contain the items (values):*/
        a = document.createElement("DIV");
        a.setAttribute("id", this.id + "autocomplete-list");
        a.setAttribute("class", "autocomplete-items");
        /*append the DIV element as a child of the autocomplete container:*/
        this.parentNode.appendChild(a);
        /*for each item in the array...*/
        for (i = 0; i < arr.length; i++) {
            /*check if the item starts with the same letters as the text field value:*/
            if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                /*create a DIV element for each matching element:*/
                b = document.createElement("DIV");
                /*make the matching letters bold:*/
                b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                b.innerHTML += arr[i].substr(val.length);
                /*insert a input field that will hold the current array item's value:*/
                b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                /*execute a function when someone clicks on the item value (DIV element):*/
                b.addEventListener("click", function(e) {
                    /*insert the value for the autocomplete text field:*/
                    inp.value = this.getElementsByTagName("input")[0].value;
                    /*close the list of autocompleted values,
                    (or any other open lists of autocompleted values:*/
                    closeAllLists();
                });
                a.appendChild(b);
            }
        }
    });
    /*execute a function presses a key on the keyboard:*/
    inp.addEventListener("keydown", function(e) {
        var x = document.getElementById(this.id + "autocomplete-list");
        if (x) x = x.getElementsByTagName("div");
        if (e.keyCode == 40) {
            /*If the arrow DOWN key is pressed,
            increase the currentFocus variable:*/
            currentFocus++;
            /*and and make the current item more visible:*/
            addActive(x);
        } else if (e.keyCode == 38) { //up
            /*If the arrow UP key is pressed,
            decrease the currentFocus variable:*/
            currentFocus--;
            /*and and make the current item more visible:*/
            addActive(x);
        } else if (e.keyCode == 13) {
            /*If the ENTER key is pressed, prevent the form from being submitted,*/
            e.preventDefault();
            if (currentFocus > -1) {
                /*and simulate a click on the "active" item:*/
                if (x) x[currentFocus].click();
            }
        }
    });
    function addActive(x) {
        /*a function to classify an item as "active":*/
        if (!x) return false;
        /*start by removing the "active" class on all items:*/
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = (x.length - 1);
        /*add class "autocomplete-active":*/
        x[currentFocus].classList.add("autocomplete-active");
    }
    function removeActive(x) {
        /*a function to remove the "active" class from all autocomplete items:*/
        for (var i = 0; i < x.length; i++) {
            x[i].classList.remove("autocomplete-active");
        }
    }
    function closeAllLists(elmnt) {
        /*close all autocomplete lists in the document,
        except the one passed as an argument:*/
        var x = document.getElementsByClassName("autocomplete-items");
        for (var i = 0; i < x.length; i++) {
            if (elmnt != x[i] && elmnt != inp) {
                x[i].parentNode.removeChild(x[i]);
            }
        }
    }
    /*execute a function when someone clicks in the document:*/
    document.addEventListener("click", function (e) {
        closeAllLists(e.target);
    });
}
</script>
}